# definities als verkorte schrijfwijze
PREFIX dbo: <http://dbpedia.org/ontology/>
PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX owl: <http://www.w3.org/2002/07/owl#>
prefix skos: <http://www.w3.org/2004/02/skos/core#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix schema: <http://schema.org/>
prefix thes: <http://data.bibliotheken.nl/id/thes/>

# Begin het maken van de selectie, de widget wordt hieronder uitgelegd, het is een speciaal keyword waarmee
# we aangeven dat we willen dat er iets wordt getoond met de plaatjes
select distinct ?auteur (SAMPLE(?image) as ?image) ?dbpedia_identifier ?abstract (SAMPLE(?widget) as ?widget) {

    # selecteer alles met type boek
    ?boek a schema:Book .

    # selecteer alles over 'dieren'
    {
        ?boek schema:about thes:p075635178
    }
    # of
    UNION
    # alles met 'dieren' als bovenliggende term
    {
        ?boek schema:about ?onderwerp_uri .
        ?onderwerp_uri skos:broader+ thes:p075635178 .
    }

    #Haal de auteur op bij een boek
    ?boek schema:author ?nta_uri .

    #En de auteur naam
    ?nta_uri schema:name ?auteur .

    # en filter alles uit de jaren 60
    # haal het jaar op uit het publicatie 'event'
    # hoewel hier een schema:startDate is gebruikt is het alleen met een jaartal gevuld
    ?boek schema:publication/schema:startDate ?jaar .

    # zet het jaar om naar een getal (integer) en filter dan het bereik tussen 1960 en 1970
    FILTER(xsd:integer(?jaar)>1959 && xsd:integer(?jaar)<1970)

    # tel alleen de boeken met gethesaureerde auteurs (daar kunnen we misschien meer over te weten komen)
    # even nagerekend: hiermee vallen twee boeken uit deze set
    FILTER(!isblank(?nta_uri))

# Hier maken we de query federated. We vragen aan het wikidata endpoint wat hun identifier is voor de auteur die we bij de KB hebben opgehaald
  service <https://query.wikidata.org/bigdata/namespace/wdq/sparql> {
        ?wikidata_identifier ?_ ?nta_uri.
    }
# En vervolgens zoeken we dezelfde dbpedia identifier en vinden zo een plaatje (en verhaaltje) erbij!
  service <https://api.triplydb.com/datasets/wikimedia/dbpedia/services/dbpedia/sparql> {
       ?dbpedia_identifier owl:sameAs  ?wikidata_identifier;
                           dbo:abstract ?abstract;
                           foaf:depiction ?image.
                           filter (lang(?abstract) = 'nl')
 }
 #Via een bind statement maken we een stukje html en geven deze de naam widget. Widget wordt herkent door Yasgui als een speciaal keyword waardoor we de plaatjes in een gallerij kunnen weergeven.
 # variabelen geven we mee door {{}} te gebruiken, we stoppen hier de variabelen zonder "?".
bind('<h1>{{auteur}}</h1><img src="{{image}}"/> <p><dt>{{abstract}}(<a href={{dbpedia_identifier}} target="blank">bron DBpedia</a>)</dt></p>' as ?widget)
}
# De eerste 3 resulataten. Wegens performance met een dubbele service clause vragen we niet teveel op.
GROUP BY ?auteur ?abstract ?dbpedia_identifier
Limit 1
